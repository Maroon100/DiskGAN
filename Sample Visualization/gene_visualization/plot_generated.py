import pickle
import os
import numpy as np
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt

path = './'
originfile = 'training.pkl'
limitation = 60

def split(dataset):
	failed = []
	count = 0
	records = dataset['X'].tolist()
	labels = dataset['Y'].tolist()
	for record in records:
		if labels[count][0] == 1:
			failed.append(record)
		count += 1
	return np.asarray(failed)

def plot(ori_data,gene_data,gene_model,savepath):
	fontsize = 10
	data = np.concatenate((ori_data,gene_data))
	label = np.array(['original']*ori_data.shape[0]+['generated']*gene_data.shape[0])
	x_tsne = TSNE(n_components=2,random_state=30).fit_transform(data,label)
	fig,ax = plt.subplots(figsize=(5,3))
	origin = ax.scatter(x_tsne[(label=='original'),0],x_tsne[(label=='original'),1],label='original',c='g',marker='x',s=50)
	generated = ax.scatter(x_tsne[(label=='generated'),0],x_tsne[(label=='generated'),1],label='generated',c='r',marker='+',s=50)
	ax.legend((origin, generated), ("Original", "Generated"), loc = "best",fontsize=fontsize)
	plt.xticks(fontsize=fontsize)
	plt.yticks(fontsize=fontsize)
	myfig = plt.gcf()
	plt.show()
	myfig.savefig(os.path.join(savepath,gene_model+'.svg'), format='svg')
	print('The distribution visualization of samples generated by %s has been saved !!!' %(gene_model))

def preprocess_and_plot(gene_model,savepath):
	file = open(os.path.join(path,originfile),'rb')
	ori_data = split(pickle.load(file))
	file = open(os.path.join(path,'generated_'+gene_model+'.pkl'),'rb')
	gene_data = pickle.load(file)['X'][:limitation]
	gene_data = np.asarray(gene_data)
	ori_data = ori_data.reshape((ori_data.shape[0],-1))
	gene_data = gene_data.reshape((gene_data.shape[0],-1))
	plot(ori_data,gene_data,gene_model,savepath)

def main():
	gene_models = ['adasyn','diskgan']
	savepath = './'
	for gene_model in gene_models:
		preprocess_and_plot(gene_model,savepath)

if __name__ == '__main__':
	main()